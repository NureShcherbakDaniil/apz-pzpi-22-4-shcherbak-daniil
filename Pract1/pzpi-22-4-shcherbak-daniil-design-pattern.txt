МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ


ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмна інженерія»




ЗВІТ
до практичного заняття №1 з дисципліни
«Архітектура програмного забезпечення»
На тему: «Патерн проєктування Abstract Factory»






Виконав:
ст. гр. ПЗПІ-22-4
Щербак Данііл Сергійович
Прийняв:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович




















Харків 2025
1 ІСТОРІЯ ЗМІН
Таблиця 1 - Історія змін
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	18.03.2025
	0.1
	Створено звіт
	2
	19.03.2025
	0.2
	Створено  програмний код (див. додаток В)
	3
	21.03.2025
	0.3
	Створено слайди презентації (див. додаток Б)
	4
	22.03.2025
	0.4
	Створено відео-захист доповіді (див. додаток А)
	



















































2 ЗАВДАННЯ
1. Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ»
(із книг: Ґамма, “ООП. Патерни проєктування”, GoF, крім патерна Singletone)
2. Створити та оформити слайди презентації доповіді
3. Створити та опублікувати на YouTube відеозапис доповіді
4. Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
5. При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
6. Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
7. Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
8. Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub
9. Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1


3 ОПИС ВИКОНАНОЇ РОБОТИ
        Для написання доповіді та створення презентації було обрано патерн “Abstract Factory”.
        У презентації (див. додаток Б) наведено загальні характеристики патернів проєктування програмного забезпечення. Детально розглянуто патерн “Abstract Factory”, в яких випадках необхідно його застосовувати, приклади практичного застосування в програмі, а також досліджено можливі переваги та недоліки даного шаблону. Наприкінці наведено загальні висновки по дослідженому матеріалу та список використаних джерел.
Відеозапис захисту практичної роботи розміщено на платформі YouTube із хронологічним описом відео (див. додаток А). 


4 ВИСНОВКИ
        Протягом роботи я дослідив аспекти використання патерну “Abstract Factory” та застосував знання на практиці через написання програмного коду.








ДОДАТОК А
Відеозапис доповіді на YouTube: https://youtu.be/7YpvFUpAS7A
Хронологічний опис відео:
0:00 Вступне слово
0:16 Вступ
0:50 Класифікація патернів
1:30 Патерн Abstract Factory
2:00 Структура Abstract Factory
2:33 Приклади використання C#
3:51 Переваги Abstract Factory
4:58 Недоліки Abstract Factory
5:50 Висновки
6:34 Список використаних джерел










































ДОДАТОК Б
  

Рисунок Б.1 - Титульний слайд 
  

Рисунок Б.2 – Вступний слайд
  

Рисунок Б.3 – Класифікація патернів
  

Рисунок Б.4 – Визначення патерну “Abstract Factory”
  

Рисунок Б.5 – Структура патерну Abstract Factory
  

Рисунок Б.6 – Перший приклад використання Abstract Factory
  

Рисунок Б.7 – Другий приклад використання Abstract Factory  
Рисунок Б.8 – Третій приклад використання Abstract Factory
  

Рисунок Б.9 – Четвертий приклад використання Abstract Factory
  

Рисунок Б.10 – П’ятий приклад використання Abstract Factory
  

Рисунок Б.11 – Шостий приклад використання Abstract Factory
  

Рисунок Б.12 – Переваги патерну
  

Рисунок Б.13 – Недоліки патерну
  

Рисунок Б.14 – Висновки по практичній роботі
  

Рисунок Б. 15 – Список використаних джерел








































ДОДАТОК В
Програмний код, наведений в презентації
Файл draft1.cs
1. public interface IButton
 2. {
 3.     void Render();
 4. }
 5. 
 6. public interface ICheckbox
 7. {
 8.     void Render();
 9. }
10. 
11. // Конкретні продукти (Windows)
12. public class WindowsButton : IButton
13. {
14.     public void Render()
15.     {
16.         Console.WriteLine("Rendering Windows Button");
17.     }
18. }
19. 
20. public class WindowsCheckbox : ICheckbox
21. {
22.     public void Render()
23.     {
24.         Console.WriteLine("Rendering Windows Checkbox");
25.     }
26. }
27. 
28. // Конкретні продукти (macOS)
29. public class MacButton : IButton
30. {
31.     public void Render()
32.     {
33.         Console.WriteLine("Rendering Mac Button");
34.     }
35. }
36. 
37. public class MacCheckbox : ICheckbox
38. {
39.     public void Render()
40.     {
41.         Console.WriteLine("Rendering Mac Checkbox");
42.     }
43. }
44. 
45. // Абстрактна фабрика
46. public interface IGUIFactory
47. {
48.     IButton CreateButton();
49.     ICheckbox CreateCheckbox();
50. }
51. 
52. // Конкретні фабрики
53. public class WindowsFactory : IGUIFactory
54. {
55.     public IButton CreateButton() => new WindowsButton();
56.     public ICheckbox CreateCheckbox() => new WindowsCheckbox();
57. }
58. 
59. public class MacFactory : IGUIFactory
60. {
61.     public IButton CreateButton() => new MacButton();
62.     public ICheckbox CreateCheckbox() => new MacCheckbox();
63. }
64. 
65. public class Application
66. {
67.     private readonly IButton _button;
68.     private readonly ICheckbox _checkbox;
69. 
70.     public Application(IGUIFactory factory)
71.     {
72.         _button = factory.CreateButton();
73.         _checkbox = factory.CreateCheckbox();
74.     }
75. 
76.     public void Render()
77.     {
78.         _button.Render();
79.         _checkbox.Render();
80.     }
81. }
82. 
83. class Program
84. {
85.     static void Main()
86.     {
87.         IGUIFactory factory = new WindowsFactory(); 
88.         Application app = new Application(factory);
89.         app.Render();
90.     }
91. }